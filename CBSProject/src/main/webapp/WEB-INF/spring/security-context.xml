<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="customAccessDenied" class="com.team4.cbs.security.CustomAccessDeniedHandler"></bean>
	<bean id="customLoginSuccess" class="com.team4.cbs.security.CustomLoginSuccessHandler"></bean>
	<!-- 1. 비밀번호를 암호화하는 것을 사용자 정의로 처리해보자 -->
<!-- 	<bean id="customPasswordEncoder" class="kr.or.ddit.security.CustomNoOpPasswordEncoder"></bean> -->
	<!-- 2. 비밀번호를 암호화 사용 -->
	<bean id="passwordEncoder" 
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	<!-- 사용자가 이미 정해놓은 테이블과 컬럼명으로 로그인 처리를 해보자 -->
	<bean id="customUserDetailsService" 
		class="com.team4.cbs.security.CustomUserDetailsService"></bean>

	<security:http>
	        <security:csrf disabled="true"/> <!--아작스 사용시 써야되는 토큰 전체 적용  // 토큰을 사용하지 않겠다라는 의미 ->전체적용시켜줌   -->
 	    <!-- <security:intercept-url  pattern="/cbs/svntAdmin/**"  access="hasAnyRole('PUBL1','CUST')"/> 경로에 따라 권한 설정 (권한X -> 에러페이지로 이동)
 	    <security:intercept-url  pattern="/cbs/quar/**"  access="hasRole('PUBL2')"/> 경로에 따라 권한 설정 (권한X -> 에러페이지로 이동)
 	    <security:intercept-url  pattern="/cbs/bounded/**"  access="hasRole('PUBL3')"/> 경로에 따라 권한 설정 (권한X -> 에러페이지로 이동) -->
		<!--로그아웃시 경로   -->
		<security:form-login login-page="/cbs/login" 
			authentication-success-handler-ref="customLoginSuccess" /> 
		
		<!-- 접근 거부 처리자(HTTP 상태 403 – 금지됨 : 권한 없음) -->
<!-- 		<security:access-denied-handler error-page="/accessError" /> -->
		<!-- 접근 거부가 발생한 상황에 단순 메시지 처리 이상의 다양한 처리를 하고자 할 때 사용자가 직접 구현할 수 있음 -->
		<security:access-denied-handler ref="customAccessDenied" />
		
		<!-- dataSource를 통해 지정한 Database의 약속된 테이블(PERSISTENT_LOGINS)을
		이용하여 기존 로그인 정보를 기록함 -->
		<!-- token-validity-seconds : 쿠키의 유효시간(초) 604800초는 7일 -->
<!-- 		<security:remember-me data-source-ref="dataSource"  -->
<!-- 			token-validity-seconds="604800" /> --> 
		
		<!-- 로그아웃 처리를 위한 URI를 지정하고, 로그아웃한 후에 세션을 무효화 함 -->
		<!-- 로그아웃을 하면 자동 로그인에 사용된 쿠키도 함께 삭제해 줌  invalidate-session="true"
		remember-me : 자동로그인(persistent_logins 테이블 사용)
		-->
		<security:logout logout-url="/logout" invalidate-session="true" 
		 delete-cookies="JSESSION_ID" />
	</security:http>
	
	<!-- 지정된 아이디와 패스워드로 로그인이 가능하도록 설정-->
	<!-- 스프링 시큐리니티 5부터 기본적으로 PasswordEncoder를 지정해야 하는데,
		그 이유는 사용자 테이블(USERS)에 비밀번호를 암호화하여 저장해야 하므로..
		우리는 우선 비밀번호를 암호화 처리 하지 않았으므로
		암호화 하지 않는 PasswordEncoder를 직접 구현하여 지정하기로 함
		noop : no option password
	 -->
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<!-- 비밀번호 암호화 씀 -->
			<security:password-encoder ref="passwordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>
</beans>	



